#ifndef _V4L2_H_
#define _V4L2_H_

typedef enum{
    IO_READ = 1,
    IO_MMAP = 2,
    IO_USERPTR = 3,
}video_io_method;

typedef struct{
    size_t length;
    void *address;
}vedio_buffer;

typedef struct{
    int video_fd;                   /* 视频采集设备的描述符 */
    int video_width;                /* 频设备图像的宽度 */
    int video_height;               /* 频设备图像的高度 */
	video_io_method method;         /* 方法 */
	vedio_buffer *buffers;          /* 帧缓冲区句柄 */
	unsigned int buffers_use_num;   /* 实际使用的帧缓冲区的个数 */
	unsigned int buffers_set_num;   /* 想要设置的帧缓冲区的个数 */
    char video_info[512];           /* 视频采集设备的信息 */
}video_handler;

/*********************************************************************
*功能:		帧图像处理函数（一般用来进行帧图像格式的转换）
*参数:		
			video：视频采集设备句柄
			src：视频采集设备的输出图像的首地址
			dest：存放图像数据的内存的首地址
*返回值:	无
*********************************************************************/
typedef void VIDEO_FRAME_CALLBACK(video_handler *video, const void *src, void *dest);

/*********************************************************************
*功能:		yuyv格式的图像转rgb24格式的图像
*参数:		
			yuv：yuyv格式图像的首地址
			rgb：rgb24格式图像的首地址，（颜色顺序为RGB），若为NULL，则不转换
			bgr：rgb24格式图像的首地址，（颜色顺序为BGR），若为NULL，则不转换
			width：图像的宽度
			height：图像的高度
*返回值:	无
*********************************************************************/
void video_yuyv_to_rgb24(const void *yuyv,
						void *rgb,
						void *bgr,
						unsigned int width,
						unsigned int height);

/*********************************************************************
*功能:		帧图像处理函数（一般用来进行帧图像格式的转换）
*参数:		
			video：视频采集设备句柄
			src：视频采集设备的输出图像的首地址
			rgb：存放rgb图像数据的内存的首地址
*返回值:	无
*********************************************************************/
void video_frame_rgb(video_handler *video, const void *src, void *rgb);

/*********************************************************************
*功能:		帧图像处理函数（一般用来进行帧图像格式的转换）
*参数:		
			video：视频采集设备句柄
			src：视频采集设备的输出图像的首地址
			bgr：存放bgr图像数据的内存的首地址
*返回值:	无
*********************************************************************/
void video_frame_bgr(video_handler *video, const void *src, void *bgr);

/*********************************************************************
*功能:		帧图像处理函数（一般用来进行帧图像格式的转换）
*参数:		
			video：视频采集设备句柄
			src：视频采集设备的输出图像的首地址
			yuvuv：存放yuvuv图像数据的内存的首地址
*返回值:	无
*********************************************************************/
void video_frame_yuvuv(video_handler *video, const void *src, void *yuvuv);

/*********************************************************************
*功能:		获取一帧图像（需调用video_release_frame函数释放申请的空间）
*参数:		
			video：视频采集设备句柄
			video_frame_dispose：帧图像处理函数，用来转换帧图像的格式
			rgb：存放rgb数据的首地址
			bgr：存放bgr数据的首地址
*返回值:	无
*********************************************************************/
void video_get_frame(video_handler *video, VIDEO_FRAME_CALLBACK video_frame_dispose, void *dest);

/*********************************************************************
*功能:		释放video_get_frame分配的空间
*参数:		
			rgb：rgb空间的首地址
			bgr：bgr空间的首地址
*返回值:	无
*********************************************************************/
void video_release_frame(void *rgb, void *bgr);

/*********************************************************************
*功能:		开启视频采集设备图像捕捉功能
*参数:		视频采集设备句柄
*返回值:	无
*********************************************************************/
void video_start_capturing(video_handler *video);

/*********************************************************************
*功能:		关闭视频采集设备图像捕捉功能
*参数:		视频采集设备句柄
*返回值:	无
*********************************************************************/
void video_stop_capturing(video_handler *video);

/*********************************************************************
*功能:		视频采集设备初始化
			1、打开设备文件
			2、设置视频采集设备的采集方式
			3、检查视频采集设备的属性
			4、设置视频采集设备的图像格式
			5、申请视频缓冲空间
			6、...
*参数:		
			video：视频采集设备句柄
			devname：视频采集设备名
			width：视频捕捉设备的宽度
			height：视频捕捉设备的高度
*返回值:	无
*********************************************************************/
void video_init_device(video_handler *video, char *devname, int width, int height);

/*********************************************************************
*功能:		视频采集设备反初始化(释放申请的空间、关设备文件)
*参数:		视频采集设备句柄
*返回值:	无
*********************************************************************/
void video_uninit_device(video_handler *video);

#endif